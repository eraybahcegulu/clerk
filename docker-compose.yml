version: "3.8"
services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/clerk
    depends_on:
      - mongodb
      - kafka
    networks:
      - app-network
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    volumes:
      - client-dist:/usr/src/app/dist
#err_empty_response 3000portu verirse vite config ts dosyasına host: '0.0.0.0'" argümanı eklenmeli****************
    ports:
      - "3002:3002"
    networks:
      - app-network
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - client-dist:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - client
    networks:
      - app-network
  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - ./zookeeper-data:/var/lib/zookeeper/data
    networks:
      - app-network
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    networks:
      - app-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network
  prometheus:
      image: prom/prometheus:latest
      container_name: prometheus
      restart: always
      ports:
        - "9090:9090"
      volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      command:
        - "--config.file=/etc/prometheus/prometheus.yml"
  grafana:
      image: grafana/grafana:latest
      container_name: grafana
      restart: always
      ports:
        - "3000:3000"
      volumes:
        - grafana-data:/var/lib/grafana
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
        - GF_USERS_ALLOW_SIGN_UP=false
      depends_on:
        - prometheus 
  node_exporter:
        image: prom/node-exporter
        container_name: node_exporter
        ports:
          - "9100:9100"

  cadvisor:
        image: gcr.io/cadvisor/cadvisor
        container_name: cadvisor
        ports:
          - "8080:8080"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /sys:/sys
          - /var/lib/docker:/var/lib/docker:ro

  nagios:
        image: jasonrivers/nagios
        container_name: nagios
        user: root
        ports:
          - "8081:80"
        restart: unless-stopped
        networks:
          - app-network
volumes:
  mongodb_data:
  client-dist:
  prometheus-data:
  grafana-data:
networks:
  app-network:
    driver: bridge

